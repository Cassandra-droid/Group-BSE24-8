
name: Deploy to Vercel Production

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the latest repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 4: Install Vercel CLI globally if not cached
      - name: Install Vercel CLI
        run: npm install -g vercel

      # Step 5: Deploy to Vercel Production
      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel_url=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --confirm)
          echo "Deployment URL: $vercel_url"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}  
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }} 
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Step 6: Get the last successful deployment ID
      - name: Get Last Successful Deployment ID
        id: get_last_successful_deployment
        run: |
          deployments=$(vercel ls --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }})
          last_successful_id=$(echo "$deployments" | grep -E 'âœ”' | awk '{print $2}' | head -n 1)
          echo "LAST_SUCCESSFUL_DEPLOYMENT_ID=$last_successful_id" >> $GITHUB_ENV
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}  
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}  

      # Step 7: Rollback on Failure
      - name: Rollback on Failure
        if: failure() 
        run: vercel rollback $LAST_SUCCESSFUL_DEPLOYMENT_ID --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}  
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Step 8: Create Sentry Release
      - name: Create Sentry Release
        run: |
          npx sentry-cli releases new -p javascript-react $GITHUB_SHA
          npx sentry-cli releases set-commits --auto $GITHUB_SHA
          npx sentry-cli releases finalize $GITHUB_SHA
